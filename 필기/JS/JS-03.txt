──────────────────────────────────────────────────────────────────────────────────────────────

@ 형변환

## 숫자 -> 문자열 ##
-> 숫자와 문자를 + 연산하게 되면 문자가 우선되어 숫자를 문자로 변환 함
-> 강제 형변환 : String() 함수를 이용

## 문자열 -> 숫자 ##
-> 사칙 연산 시 숫자가 우선되어 문자를 숫자로 변환
    - 단, +는 자동 변환하지 않음 (-, *, /, % 만 해당)
-> 강제 형변환 : Number(), parseInt(), parseFloat() 함수 이용

──────────────────────────────────────────────────────────────────────────────────────────────

@ 연산자의 종류

최우선 연산자 : (), [], .
단항 형산자 : ++, --, +, -
산술 연산자 : +, -, *, /, %
관계 연산자 : >, <, >=, <=, ==, !=, ===, !==
논리 연산자 : &&, ||
대입 연산자 : =
복합 대입 연산자 : +=, -=, *=, /=, %=

※ 연산자 우선 순위는 위에서 아래로
최우선 > 단항 > 산술 > 관계 > 논리 > 삼항 > 대입

## === 연산자와 !== 연산자 ##
-> ===, !== 연산자는 데이터와 자료형까지 비교함

──────────────────────────────────────────────────────────────────────────────────────────────

@ 제어문

## 조건문 ##
-> if, if ~ else, else if, switch, 짧은 조건문(||, &&)

## 반복문 ##
-> for, while, do-while, for in문

## 분기문 ##
-> continue, break

# 문법은 자바와 동일하나 사용 시에 데이터와 자료형은 var 라는것을 사용

## 짧은 조건문(||, &&) ##
-> ||는 거짓이면 실행
-> &&는 참이면 실행

||(OR)와 &&(AND)의 동작 방식을 이용하여 만든 조건문임
-> OR 연산자는 앞의 것이 참이면 뒤의 것을 볼 필요가 없으므로 뒤에 구문이 동작하지 않음
    - 하지만 앞의 것이 거짓이라면 뒤의 것이 참일 수 있으므로 뒤의 것을 봐야 함

-> AND 연산자는 앞의 것이 참이더라도 뒤의 것을 봐야 하므로 참이면 실행 되는 원리
    - 만약 앞의 것이 거짓이면 뒤의 것은 볼 필요가 없으므로 실행되지 않는 원리


※ OR 연산은 둘 중에 하나라도 참이면 참, and 연산은 둘다 참이여야 참이기 때문

──────────────────────────────────────────────────────────────────────────────────────────────

@ 배열
    -> 다양한 타입의 데이터를 보관하는 변수의 모음
        - 자바, C 등의 언어들은 같은 데이터 타입을 저정하는 변수들의 모음이지만
        자바스크립트는 데이터 타입이 상관없음

    -> '[]' (대괄호)를 통해 생성과 초기화를 동시에 처리 가능함
    -> 자료형 지정이 없어 모든 자료형(숫자, 문자열, 함수, boolean, undefined, 객체 등등)이
        데이터로 저장 가능함 (자바로 치면 컬렉션과 매우 흡사함)

    
ex)
    var 배열명 = [값1(숫자), 값2(문자), 값3(객체)... 등등];
    -> 여러 가지 타입을 동시에 배열에 저장이 가능함

@ 배열 선언
    -> new 연산자와 Array 객체를 통한 배열 선언
    -> 배열 크기를 정하지 않고 선언 / 배열 크기를 정하는 선언

## 배열의 길이를 정하지 않고 선언 ##
    var 변수명 = new Array();

## 배열의 길이를 정한 배열 선언 ##
    var 변수명 = new Array(숫자);

## 배열의 초기 값을 이용한 배열 선언 ##
    var 변수명 = new Array(값1, 값2, 값3, ...);

## 배열의 초기 값을 이용한 배열 선언 ##
    var 변수명 = [값1, 값2, 값3, ...];

ex) 
    var arr1 = new Array(1, 2, 3); // 초기 값을 넣고 배열이 생성됨
    var arr2 = [1, 2, 3]; // new 연산자를 쓰지 않아도 배열이 자동 생성 됨
    var arr3 = new Array(); // 초기 값을 넣지 않도록 배열을 생성 할 수 있음

※ new Array()로 선언 시 배열의 길이는 0이 되고 데이터가 추가 될 때 마다
자동으로 1개씩 배열 공간이 늘어남

@ 배열의 값 대입
-> 값을 입력 시에 index 번호를 활용
-> 번호를 범위 0 부터 시작함 (마지막은 길이의 -1 번째)

var arr = new Array(5);

arr[0] = 123;
arr[1] = 132;
arr[2] = 213;
arr[3] = 231;
arr[4] = 312;

@ 배열 객체 함수
-> 자바스크립트에서 사용하는 배열도 하나의 객체이기 때문에 배열에서 활용 할 수 있는 메소드가 있음


배열명.indexOf('값') : 배열에서 '값'이 위치한 인덱스 리턴
배열명.concat(배열명) : 두 개 또는 세 개의 배열을 결합 함
배열명.join() : 배열을 결합하고 문자열로 반환
배열명.reverse() : 배열의 순서를 역순으로 함
배열명.sort() : 배열을 내림차순 또는 오름차순으로 정렬함
    - sort는 문자열을 정렬하는 함수
    -  숫자가 있어도 자동으로 문자열로 변경되어 정렬을 처리함
배열명.push('값') : 배열의 맨 뒤에 새로운 요소를 추가
배열명.pop() : 배열의 맨 뒤에 있는 요소를 제거 함
배열명.shift() : 배열의 맨 첫번째 요소를 제거 함
배열명.unshift('값') : 배열의 맨 앞에 새로운 요소를 추가함
배열명.toString() : 배열을 문자열로 반환

## indexOf ##
-> 문자열을 입력하여 처음으로 나오는 위치를 반환 함
──────────────────────────────────────────────────────────────────────────────────────────────
