


@ 함수 선언
-> 반환 형태 선언 없이 function 키워드만 이용하여 사용함
-> function 키워드에 함수명을 작성하여 생성하는 방법 (선언적 함수)
-> function 에 함수명을 작성하지 않고, 변수에 대입하는 방법 (익명 함수)
-> 스스로 동작하는 함수 (익명 함수)
	- 단순한 이벤트 처리시 사용

## 선언적 함수 ##

function 함수명([매개변수]){
	처리되는 로직
	[return 되돌려줄 값;]
}



ex) 매개변수도 없고, 넘겨주는 인자값도 없는 함수

	<script>
		function test(){

		}
	</script>

ex) 매개변수는 없지만, 인자값이 있는 경우에 처리하는 함수
	<script>
		function test(){
			console.log(arguments[0]);
		}
	</script>

※ 자바스크립트에서는 매개변수가 없어도 인자값을 넘겨줄 수 있음
처리할때에는 arguments 라는 배열에 자동적으로 들어가 있음


ex) 매개변수는 있지만, 인자값이 없는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>

※ 매개변수도 있지만 인자값이 없으면 값이 나오지 않음

ex) 매개변수도 있고, 인자값이 있는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>
※ 매개변수에 값이 전달되고 매개변수를 통해서 값을 출력할 수 있음


## 익명 함수 ##
-> 변수에 함수를 넣어 작성하는 방법
-> 기존 선언적 함수는 만든 함수를 메모리에 바로 올려놓기 때문에 코드의 순서와는
상관없이 호출이 가능함
-> 하지만 변수에 담기는 익명함수는 해당 변수 및 함수 선언 이후에만 사용이 가능함

## 익명 함수2 ##
-> 스스로 작동하는 익명함수는 1회용이기 때문에 리턴값을 넘길 수 없음
