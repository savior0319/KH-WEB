──────────────────────────────────────────────────────────────────────────────────────────────

@ 기본 선택자
-> All Selector $('*')
    -> HTML DOM의 모든 Element 선택

-> Element Selector $('tag') -> $('p')
    -> 지정된 tag와 일치하는 모든 Element 선택

-> ID Selector $('#id') = document.getElementById('id')
    -> 지정된 id와 일치하는 Element 선택

-> Class Selector $('.class')
    -> 지정된 class와 일치하는 모든 Element 선택

-> Mutiple Selector $('tag1, tag2')
    -> 지정된 tag1과 tag2 일치하는 모든 Element 선택

ex)
        var $all = $('*'); // 전체 선택자
        var $span = $('span'); // 태그 선택자
        var $p4 = $('#p4'); // ID 선택자
        var $test = $('.test'); // 클래스 선택자
        var $p2p3 = $('#p2,#p3'); // ID p2, p3 선택자

──────────────────────────────────────────────────────────────────────────────────────────────

@ 자식 선택자
-> 자식을 선택하는 선택자
-> '부모>자식' 형태로 사용

ex)
       $('li>h1').css('background', 'hotpink');
       $('ul>li').css('color', 'blue');
       $('body>h1').css('color', 'red');

──────────────────────────────────────────────────────────────────────────────────────────────

@ 후손 선택자
-> 후손을 선택하는 선택자
-> '요소 A 요소 B의 형태로 사용'
    - 요소 A의 후손으로 범위 한정 됨

ex)

    $('body h1').css('color', 'red'); // 후손 선택자 -> body 안에 있는 모든 h1

──────────────────────────────────────────────────────────────────────────────────────────────

@ 속성 선택자
-> 기본 선택자 뒤에 붙여 사용

요소[속성] = 특정 속성을 가지고 있는 객체 선택
요소[속성=값] = 속성 안의 값이 특정 값과 같은 객체 선택
요소[속성*=값] = 속성 안의 값이 특정 값을 단어로써 포함하는 객체 선택
요소[속성^=값] = 속성 안의 값이 특정 값으로 시작하는 객체 선택
요소[속성$=값] = 속성 안의 값이 특정 값으로 끝나는 객체 선택
요소[속성*=값] = 속성 안의 값이 특정 값을 포함하는 객체 선택

ex)
      $('input[type=text]').css('color', 'red');
      $('input[name^=fi]').css('background', 'darkgray');
      $('input[name$=th]').css('color', 'blue');    

──────────────────────────────────────────────────────────────────────────────────────────────

@ 입력 양식 필터 선택자
-> input 태그의 type 속성에 따라 문서 객체 선택 가능
-> 필터 선택자는 기본 선택자 뒤에 사용 함

ex) 'input:button'의 형태로 사용

input:button
input:checkbox
input:file
input:image
input:password
input:radio
input:reset
input:submit
input:text

input:checked   |   input 태그 중 체크된 객체
input:disabled  |   input 태그 중 비활성화된 객체
input:enabled   |   input 태그 중 활성화된 객체
input:selected  |   select 태그의 option 태그 중 선택된 객체

ex)
     $('input:button').css('color', 'red');
     $('input:button').click(function () {
        // setTimeout(function () {
        var value = $('select>option:selected').val();
        alert(value);
        $('select>option:selected').remove();
        // }, 3000);

──────────────────────────────────────────────────────────────────────────────────────────────

@ 위치와 관련된 필터 선택자

요소:odd    홀수 번째에 위치한 객체 선택
요소:even   짝수 번째에 위치한 객체 선택
요소:first  첫번째에 위치한 객체 선택
요소:last   마지막에 위차한 객체 선택

ex)
        $('tr:odd').css('color', 'blue');
        $('tr:even').css('color', 'green');
        $('tr:nth-of-type(1)').css('color', 'red');

──────────────────────────────────────────────────────────────────────────────────────────────

@ 함수 형태의 필터 선택자
-> 함수 형태를 가지고 있는 선택자

요소:contains(문자열)   특정 문자열을 포함하는 객체 선택
요소:eq(n)              N번째에 위치하는 객체 선택
요소gt(n)               N번째를 초과하는 객체 선택
요소:has(h1)            H1태그를 가지고 있는 객체 선택
요소:lt(n)              N번째 미만에 위하는 객체 선택
요소:not(선택자)        선택자와 일치하지 않는 객체(부정)
요소:nth-child(3n+1)    3n+1번째에 위치하는 객체 선택(1, 4, 7, 10, ..) //

※ 자바스크립트에서의 배열이 0부터 시작하기 때문에 n번째는 0번째 부터 시작하고, nth-child는
Jquery의 표준을 따라서 1번째 부터 시작 함

──────────────────────────────────────────────────────────────────────────────────────────────

@ JQuery Traversing
-> JQuery Traversing은 Jquery의 탐색(순회)이라는 뜻
-> 특정 요소를 찾거나 필터링 하는 작업은 대부분 선택자(selector)를 사용 하면 됨
-> 1차적으로 선택자에 의해 찾은 요소들을 다시 2차 필터링 하거나 새로운 요소를
추가 할 때는 traverse 관련 메소드를 사용 하면 됨

※ 처음 필터 처리한 요소들의집합에서 다시 특정 요소를 찾거나 또는 필터링과 같이 추가하는
동작이라고 보면 됨

@ filtering 메소드
-> 선택자로 지정한 객체를 기준으로 객체 그룹에서 위치를 기준으로 객체 선택을 하는 메소드


    <p class="a">내용1</p>
    <p class="b">내용2</p>
    <p class="c">내용3</p>
    <p class="b">내용4</p>
    <p class="e">내용5</p>

## first() ##
-> 선택된 요소 중 가장 첫번째 요소를 리턴

ex)
    $('.a').first().css('color', 'red').css('background', 'skyblue');

## last() ##
-> 선택된 요소 중 가장 마지막 요소를 리턴

ex)
    $('.b').last().css('color', 'red').css('background', 'skyblue');

## eq() ##
-> 인텍스 번호와 일치하는 요소 리턴 (0부터 시작)

ex)
    $('p').eq(2).css('color', 'red');

## filter() ##
-> 인자값과 일치하는 요소만 리턴
-> 2가지 형태로 사용
    - $('selector').filter(selector);
    - $('selector').filter(function(){});

ex)
    $(document).ready(function () {
        var $select = $('p').filter(
            function (index) {
                if (index == 0) return false;
                return index % 2 == 0;
            }
        );
        $select.css('color', 'red');
    });


## not() ##
-> 인자값과 일치하니 않는 요소만 리턴

ex)
    $(document).ready(function () {
        var $select = $('p').not('.p');
        $select.css('background', 'hotpink');

    });

──────────────────────────────────────────────────────────────────────────────────────────────

@ Ancestors 메소드
-> 선택된 요소의 상위 요소들을 선택 할 수 있는 메소드

## parent() ##
-> 선택된 요소의 바로 위(상위요소)만 리턴

ex)
    $(document).ready(function () {
        var $span = $('span').parent();
        $span.css('border', '2px solid red');
    });

## parents([인자]) ##
-> 선택된 요소의 모든 상위 요소 리턴
-> 매개변수가 있으면 매개변수와 일치하는 부모만 리턴

ex)
     var $span = $('span').parents('ul'); // 부모 중 'ul' 태그만 선택
     $span.css('border', '2px solid red');

## parentsUntil([인자]) ##
-> 선택된 요소로부터 인자요소까지 범위의 요소 리턴
    (선택된 요소는 0h제외 함)

ex)
    var $span = $('span').parentsUntil('div'); // 부모 중 'div' 태그 전까지 선택
    $span.css('border', '2px solid red');

## children([인자]) ##
-> 선택된 요소의 모든 자손(다음레벨) 객체를 리턴
-> 선택된 요소의 인자와 일치하는 자손(다음레벨) 객체 리턴

ex)
     $(document).ready(function () {
      var $div = $('div').children();
     $div.css('border', '2px solid red'); // 직계 자손 선택
      //or
     var $div = $('div').children('.child1'); // child1만 선택
     });

## find(인자) ##
-> 선택된 요소의 인자와 일치하는 모든 후손 (모든 레벨) 객체 리턴

ex)
    var $div = $('div').find('span'); // 후손들 중 span 태그를 선택

## siblings([인자]) ##
-> 같은 레벨에 있는 요소(형제)를 선택 할 수 있는 메소드
-> 같은 레벨에 있는 요소(형제)중 인자와 일치하는 요소 리턴

ex)
    var $select = $('h2').siblings(); // 자신을 제외 한 모든 형제
    var $select = $('h2').siblings('p'); 

