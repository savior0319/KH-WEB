──────────────────────────────────────────────────────────────────────────────────────────────────

@ 정규표현식
-> 정규식은 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어
-> 많은 텍스트 편집기와 프로그래밍 언어에서 문자열의 검색과 검색과 치환을 위해 지원하고 있음
-> 정규식에서 사용하는 기호를 Meta 문자 라고 함
    -Meta 문자는 어떠한 의미가 있는 문자
-> 실질적으로 유효성을 체크 할 때 정규표현식을 많이 사용 함
-> 정규표현식은 다양한 표현식이 존재 함

@ 자바스크립트에서 정규표현식을 사용하는 방법

1. RegExp 객체를 이용하는 방법
    var regExp = new RegExp('정규표현식', ['Flag']);
2. 객체초기화를 사용하는 방법
    var objectIntializer = /정규표현식/[Flag];


## Flag의 종류 ##

    g | Global  -> 문자열 내의 모든 패턴을 찾음
    i | Ignore Case -> 문자열의 대소문자를 구별하지 않고 찾음
    m | Multi Line -> 문자열의 행이 바뀌여도 찾음

## 기본적인 정규 표현식 ##
    ^       라인의 시작
    $       라인의 끝
    .       모든 단일 문자
    []      대괄호 사이의 존재하는 문자들 중 하나 일치
    ?       - 앞에 존재하는 문자가 있을 수도 없을 수도 있을 때 사용
            - 수량자(=, +, ?, {})뒤에 사용하면 최단 검색의 의미
                ※ ?는 2가지의 의미가 있음
    {}      횟수만큼 반복
    *       0회 이상 반복되는 앞선 문자 일치
    +       1회 이상 반복되는 앞선 문자 일치
    ()      그룹화
등등..

ex)
        // var regExp = /a/; // 입력 값에 a가 무조건 있어야 함
        // var regExp = /^a/; // 입력 값 첫번째 글자가 a로 시작해야 함
        // var regExp = /[ab]/; // 입력 값에 a또는 b가 포함 되어야 함
        // var regExp = /^[ab]/; // 입력 값이 a또는 b로 시작해야 함
        // var regExp = /a$/; // 마지막 글자가 a로 끝나야 함
        // var regExp = /^a.+b$/; // 시작은 a 마지막은 b로 끝나야함 1글자이상
        // var regExp = /^a.*b$/; // 시작은 a 마지막은 b로 끝나야함 0글자이상
        // var regExp = /^[0-9]+$/; // 시작부터 끝까지 숫자만 입력되야 함
        // var regExp = /^[a-z]+$/i; // 시작부터 끝까지 영어(소문자 or 대문자)만 입력되야 함1
        // var regExp = /^[a-zA-Z]+$/; // 시작부터 끝까지 영어(소문자 or 대문자)만 입력되야 함2
        // var regExp = /^[a-zA-Z0-9]+$/; // 시작부터 끝까지 영어 + 숫자만 입력되야함
        // var regExp = /^[가-힣]+$/; // 시작부터 끝까지 자음+모음의 한글만 입력되어야 함   
        // var regExp = /^[가-힣ㄱ-ㅎㅏ-ㅣ]+$/; // 시작부터 끝까지 한글(자음 or 모음 or 자음+모음)의 한글만 입력되어야 함
        // var regExp = /^[a-zA-Z]+[a-zA-Z0-9]*$/; // 영문자 또는 숫자이면서 시작은 영문자
        // var regExp = /^[a-zA-Z]{3,5}$/; // 영문자 최소 3글자, 최대 5글자
        // var regExp = /^Hello ?World$/i; // Hello World | HelloWorld 둘다 가능 + 대소문자 구별 안함
        // var regExp = /^Hello(  )?world$/i; // Hello World | Hello  World(띄어쓰기 두번) 가능 + 대소문자 구별 안함 () -> 그룹화 

## 정규식에서 사용되는 기본 함수 ##
-> test : 일치하는 문자열을 검사할 떄 사용 (true, flase 리턴)
-> exec : 일치하는 문자열을 찾을 때 사용 (찾아서 배열로 문자열을 리턴함)
-> replace : 일치하는 문자열을 찾아 대체함

## replace ##
-> replace 함수는 일치하는 문자열을 찾아 대체문자열로 바꾸어 줄때 사용

ex) 영문자 제거

        var regExp = /[a-zA-Z]/g;
        var result = value.replace(regExp, '');

## exec 함수 활용하기 ##
-> ()를 사용하여 그룹화된 데이터를 가져올 수 있음
-> exec 함수를 사용하면 결과 값은 배열로 리턴함
-> [0]번째는 정규표현식으로 만든 데이터 전체를 가져오고 [1], [2], [3] .. 번째 부터는 그룹화된 데이터를 가져옴

──────────────────────────────────────────────────────────────────────────────────────────────────




