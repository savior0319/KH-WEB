──────────────────────────────────────────────────────────────────────────────────────
@ 이벤트
-> 사용자가 마우스를 클릭하거나 마우스 움직여 특정 화면 위로 가져가거나
키보드를 누르는 행위를 이벤트라고 부름
-> JQuery는 event 객체를 통해서 이벤트를 제어할 수 있음

※ 다양한 이벤트 참조
-> https://www.w3schools.com/jquery/jquery_ref_events.asp

──────────────────────────────────────────────────────────────────────────────────────

@ 이벤트 연결 방법
$('선택자').method(function(event){});

ex) hover 이벤트
$('선택자').hover(inFuction.outFunction);

ex)
    $(document).ready(function () {
        var h1 = $('h1');
        h1.hover((function () {
            $(this).addClass('hoverTest');
        }), function () {
            $(this).removeClass('hoverTest');
        });
    });

## trigger() ##
-> 이벤트를 강제적으로 발생 시킴 

ex)
    $(document).ready(function () {
            var $btn1 = $('button:eq(0)'),
                $btn2 = $('button:eq(1)'),
                $btn3 = $('button:eq(2)'),
                $btn4 = $('button:eq(3)');

            $btn1.click(function () {
                lvUp($('span:eq(0)'));
            });

            $btn2.click(function () {
                lvUp($('span:eq(1)'));
            });

            $btn3.click(function () {
                lvUp($('span:eq(2)'));
            });

            $btn4.click(function () {
                $btn1.trigger('click');
                $btn2.trigger('click');
                $btn3.trigger('click');
            });

            function lvUp(el) {
                var value = Number(el.html()) + 1;
                el.text(value);
            }
        });

──────────────────────────────────────────────────────────────────────────────────────        

@ 기본 이벤트 제거, 이벤트 전달을 막는 메소드
-> event.preventDefault()    기본 이벤트 제거
-> event.stopPropagation()   이벤트 전달 제거


## event.preventDefault() ##
-> 이벤트를 제거 하는 메소드

ex)
    $(document).ready(function () {
        var isSwitch = true;
        $('button').click(function () {
            if (isSwitch == true) {
                isSwitch = false;
                $(this).text('off');
            } else {
                isSwitch = true;
                $(this).text('on');
            }
        });

        $('a').click(function () {
            if (isSwitch == false) {
                event.preventDefault(); // 기본 이벤트 제거
                alert('On 상태에서 클릭하세요');
            }
        })
    });

## event.stopPropagation() ##
-> 이벤트 버블링을 막는 메소드

ex)
 $(document).ready(function () {
        $('button').click(function () {
            alert('참 잘');
            event.stopPropagation(); // 이벤트 버블링 제거
            // or
            // return false;
        });

        $('div').click(function () {
            alert('참 잘 div');
        });
    });

──────────────────────────────────────────────────────────────────────────────────────

## on() && off() 메소드 ##
-> 이벤트를 연결 및 해제 하는 메소드

ex)
    $(document).ready(function () {
        var $btn1 = $('#btn1');

        $('#btn2').click(function () {
            $btn1.html('Click');
            $btn1.on('click', function () {
                alert('이벤트 추가');
            });
        });

        $('#btn3').click(function () {
            $btn1.html('Not');
            $btn1.off('click');
        });
    });

──────────────────────────────────────────────────────────────────────────────────────

@ 마우스 이벤트 

## click ##
-> 마우스 클릭 이벤트

## dblclick ##
-> 마우스 더블 클릭 이벤트

ex)
    $(document).ready(function () {
        $('div:eq(0)').on('click', function () {
            $(this).css('color', 'red');
        });

        $('div:eq(1)').on('dblclick', function () {
            $(this).css('color', 'blue');
        });
    });

## mousedown | mouseup ##
-> mousedown    마우스 버튼이 눌릴 때
-> mouseup      마우스 버튼을 놓을 때 

## mousemove() ##
- 마우스가 움직일 때 발생하는 이벤트
-> event.pageX 브라우저의 화면을 기준으로 마우스 X좌표 위치
-> event.pageY 브라우저의 화면을 기준으로 마우스 Y좌표 위치

ex)

    $(document).ready(function () {
        $(document).mousemove(function () {
            $('#xy').html("X : " + event.pageX + " , Y: " + event.pageY);
        });
    });

──────────────────────────────────────────────────────────────────────────────────────

@ 키보드 이벤트
-> 키보드 버튼이 눌리거나 뗄 때 발생하는 이벤트

keydown     키보드가 눌러질 때
keypress    글자가 입력 될 때
keyup       키보드가 떼어질 떄

※ keydown과 keypress는 아주 미세한 차이
    - 글자를 입력하면 keydown이 먼저 작동, 이후에 글자가 써지면 keypress가 작동 

-> 키보드 이벤트 실행 순서
1. 사용자가 키보드를 누름
2. keydown 이벤트 발생
3. 글자가 입려됨
4. keypress 이벤트 발생
5. 사용자가 키보드에서 손을 뗌(눌렀던 버튼에서 손을 뗌)
6. keyup 이벤트 발생

──────────────────────────────────────────────────────────────────────────────────────

@ 입력 양식 이벤트
-> 입력하는 폼 양식에 발생하는 이벤트

change      입력 양식의 내용을 변경할 때 발생
focus       입력 양식에 초점을 맞추면 발생
focusin     입력 양식에 초점이 맞춰지기 바로 전에 발생
focusout    입력 양식에 초점이 사라지기 바로 전에 발생
blur        입력 양식에 초점이 사라지면 발생
select      입력 양식을 선택할 때 발생
submit      submit 버튼을 누르면 발생
reset       reset 버튼을 누르면 발생

## change ##
-> 해당 요소가 변경 되었을 때

ex)

  $(document).ready(function () {
        var object = $('#checkItem').children('input');

        $('#all').change(function () {
            if (this.checked == true) {
                object.each(function (index, item) {
                    item.checked = true;
                });
            } else {
                object.each(function (index, item) {
                    item.checked = false;
                });
            }
        });

        $('#checkItem').children().change(function () {
            if (this.checked == true) {
                $(this).next().css('color', 'red');
                console.log($(this).next().html());

            } else {
                $(this).next().css('color', 'black');
            }
        });
    });

## focusin() / focusout() ##
-> 해당 요소에 포커스를 받았을 때, 포커스가 해제 되었을 때

──────────────────────────────────────────────────────────────────────────────────────

@ 효과(effect) 메소드
-> 페이지에 애니메이션 효과를 만들기 위한 메소드의 집합

@ jquery의 기본 효과

show()          문서 객체를 크게 하며 보여줌
hide()          문서 객체를 작게 하며 사라지게 함
toggle()        show() 메소드와 hide() 메소드를 번갈아 가면서 실행 함
slideDown()     문서 객체를 슬라이드 효과와 함께 보여줌
slideUp()       문서 객체를 슬라이드 효과와 함께 사라지게 함
slideToggle()   slideDown() 메소드와 slideUp() 메소드를 번갈아 가면서 실행 함
fadeIn()        문서 객체를 선명하게 하며 보여줌
fadeOut()       문서 객체를 흐리게 하며 사라지게 함
fadeToggle()    fadeIn() 메소드와 fadeOut() 메소드를 번갈아 가면서 실행 함  

사용 구문
1. $('선택자').메소드명();
2. $('선택자').메소드명([speed]);
3. $('선택자').메소드명([speed], [easing], [callback]);

speed       실행 속도(밀리세컨) / 숫자값 또는 slow, fase(문자열)
easing      변경되는 지점별 속도 / linear, swing 가능
    ※ linear : 일정한 속도
    ※ swing : 처음과 끝부분은 속도가 느리고 중간에는 빨라짐
callback : 메소드 실행 후 실행할 함수       


## hide $ show ##

hide : 문서 객체를 작게 하며 사라짐
show : 문서 객체를 크게 하며 보여줌


## toggle() 메소드 ##
-> show() 메소드와 hide() 메소드를 번갈아 가면서 실행 함

ex)
    $(document).ready(function () {
        var img = $('img');

        $('#hide').click(function () {
            img.hide(1000);
        });

        $('#show').click(function () {
            img.show(1000);
        });

        var isFlag = false;
        $('#toggle').click(function () {
            img.toggle(1000);
            if (isFlag == false) {
                document.getElementById('toggle').innerHTML = '보이기';
                isFlag = true;
            } else if (isFlag == true) {
                document.getElementById('toggle').innerHTML = '감추기';
                isFlag = false;
            }
        });
    });

──────────────────────────────────────────────────────────────────────────────────────

@ animate() 메소드
-> 현재의 css속성을 설정한 값으로 차츰 변경되는 효과를 주는 메소드

사용 구문

$('선택자').animate({CSS속성 설정}, [시간], [linear|swing].[함수]);

CSS속성 : 객체로 지정, 속성명 : 속성 값
시간 : 숫자(ms), slow, fast // default 값 = 400ms
구간별 속도 
- linear : 일정한 속도
- swing : 처음과 끝 부분은 속도가 느리고 중간에는 빨라짐
함수 : 애니메이션 종료 후 실행 할 함수

──────────────────────────────────────────────────────────────────────────────────────


