
@ type 별 속성 값

## hidden 속성 ##
-> 사용자에게 보이지는 않지만 값을 가지고 있는 속성

name : hidden 속성 테이터 구분자 또는 명칭
value : hidden에 들어갈 값 설정

<input type=hidden name='명칭' value='값'>

## text 속성 ##
-> 사용자에게 값을 입력받기 위한 속성

추가 속성
name : text 속성 데이터 구분자 또는 명칭
size : 사용자 화면에 보여질 문자를 입력하는 창의 길이
value : text에 들어갈 값 설정하지 않으면 빈값이 됨
maxlength : 총 입력 받을 개수

<input type='text' name='명칭' value='값' size='숫자' maxlength='숫자'>

※ 추가적인 속성으로 readonly 사용하면 읽기 전용이 되므로 사용자는 입력 or 수정 할 수 없음
※ placeholder='값' 을 사용하면 입력 전 표시글로 사용 할 수 있음


ex1)
ID : <input type='text' name='ID' size='20' maxlength='20'><br>

ex2)
ID : <input type='text' name='ID' placeholder='아이디를 입력하세요'><br>

ex3)
ID : <input type='text' name='ID' value='admin' readonly><br>

## password 속성 ##
-> text 타입 처럼 사용자가 입력 할 수 있는 필드
-> 입력 시 데이터를 알 수 없게 ●●●●로 표시함 

<input type='password' name='명칭'>

## button 속성 ##
-> 버튼을 생성 하는 타입
-> 별도의 기능이 따로 부여되어 있지는 않음

추가 속성
id : 구분자(CSS나 JavaScript에서 구분하기 위한 구분자)
value : button에 표시될 값 (ex. 입력, 전송 등등)
event : 자바 스크립트를 불러올 행동 (ex. onclick)

<input type='button' id='명칭' value='값' onclick='스크립트 함수'>

## checkbox / radio ##
-> 사용자가 체크할 수 있는 체크 박스와 라디오 버튼을 생성

name : 구분자 또는 명칭
value : 전송시 전달할 값
checked : 처음에 선택 될 값 지정 (default : 지정안됨)

작성법
<input type='checkbox' name='명칭' value='값'>
<input type='radio' name='명칭' value='값'>

## file ##

-> 파일을 전송 할 때 사용하는 type
-> 선택한 파일의 이름을 가져옴

※ 실제 파일의 내용을 전송하려면 별도의 코드를 구현 해야 함

<input type='file' name='명칭'>


## html5에 추가된 type ##

추가된 type 속성

color : 색상 선택 양식
date : 날짜 선택 양식 생성
datetime-local : 날짜 / 시간 선택 양식 생성
time : 시간 선택 양식 생성
month : 년 / 월을 생성 하는 양식 생성
week : 주를 선택 하는 양식을 생성
number : 숫자를 입력하는 양식을 생성
range : 슬라이드 막대로 숫자 입력 생성
search : 검색어를 입력하는 창 생성 (입력 구에 x 버튼이 생김)
tel : 전화번호를 입력하는 창 생성
email : @를 포함하여 작성해야 하는 창 생성 (이메일 형식)
url : 주소값을 입력하는 창생성 (http:// 가 있는 지를 확인 함)


## option ##

name : 이름 구분자

사용법
<input type='color' name='명칭'>


## date, datetime-local, month, week ##
(기존 datetime이 있었으나 사용을 권장하지 않고 중단 됨. datetime은 사용자가 직접 날짜 입력)


min : 최소 표시 날짜 지정 (ex. 1988-01-01)
max : 최대 표시 날짜 지정 (ex. 2099-01-01)
value : 초기 표현 값

<input type='타입명' id='명칭' min='yyyy-mm-dd' max='yyyy-mm-dd' step='숫자' value='날짜'>

※ date : yyyy-mm-dd
※ datetime-local : yyyy-mm-ddT00:00(24)
※ month : yyyy-mm

## time ##
-> 시간을 지정할 수 있는 타입

value : 초기 시간 지정

<input type='time' id='명칭' value='00:00'>

## number / range ##

속성
min : 최소 표시 숫자 지정
max : 최대 표시 숫자 지정
step : 숫자 간격 지정
value : 초기 표현 값

<input type=number / range name='명칭' min='숫자' max='숫자' value='숫자'>

※ range는 크롬에서는 제대로 표시 되지 않음

## search / url / email / tel ##

작성법

<input type='[search|url|email|tel]' name='명칭' value='초기값'>

※ search & tel은 지원하는 웹 브라우저가 많지 않음

## 여러 값 표현 태그 ##

## select 태그 ##
-> select list를 만드는 태그

속성

size : 화면에 표시될 항목 개수 지정
multiple : 여러 항목을 선택 지정 (ctrl 누른 상태에서 선택)

## option 태그 ##
-> select 안에 표시 될 목록을 만드는 태그

작성법

<select size='숫자' name='명칭'>
    <option value='값1'> 표시내용1 </option>
    <option value='값2'> 표시내용2 </option>
    <option value='값3' selected> 표시내용3 </option>
</select>

※ option에 selected 값을 주게 되면 선택 된 상태로 나오게 됨


## optgroup 태그 ##
-> 옵션을 그룹으로 묶어서 출력하는 태그

작성법

<select>
    <optgroup label='목록이름 1'>
        <option value='값1'> 표시내용1 <option>
        <option value='값2'> 표시내용2 <option>
    </optgroup>

        <optgroup label='목록이름 2'>
        <option value='값3'> 표시내용3 <option>
        <option value='값4'> 표시내용4 <option>
    </optgroup>
</select>


## datelist 태그 ##
-> select 와 비슷하게 option을 이용하여 항목을 넘겨주는 태그

작성법

<input type='text' id='' list='datelistid값'>
    <datelist id=''>
        <option value='값' label='명칭'></option>
        <option value='값' label='명칭'></option>
    </datelist>


## textarea 태그 ##
-> 긴 장문의 글을 작성할 때 사용하는 텍스트 영역

@ CSS 란
-> Cascading Style Sheets 의 약자
-> 웹 문서의 전반적인 스타일을 미리 저장해 둔 스타일 시트
-> 기존 HTML은 다양하게 설계하고 수시로 변경하는데 많은 제약이 따름
    이를 보완하기 위해 만들어진 것이 스타일 시트
-> 문서 작성 내용과 꾸미는 부분을 분리하여 내용을 수정하여도 디자인을 바꿀
    필요가 없고, 디자인을 수정해도 글 내용을 바꿀 필요가 없어지게 만듦


스타일 시트 기본 형식

ex) 

p { text-align : center; }

p		: 선택자
text-align	: style 속성
center		: 속성 값


※ CSS에서 가장 중요한것은 선택자 선택자를 잘 쓸 줄 알아야지만 
	Front 개발자 입장에서 변경하고자 하는 것을 선택할 수 있음


@ 내부 스타일 시트
-> <style></style>를 사용하여 내부에 스타일 정보를 저장하는 기법
-> 내부에 스타일 시트를 정의하고 사용 하게 됨 (해당 페이지에서 계속 사용)

ex) 
<style>
	p {text-align : center;}
</style>


@ 외부 스타일 시트
-> <link> 태그를 이용하여 css파일을 읽어와서 스타일을 적용
-> 외부에서 가져온 것이기 때문에 다른 페이지에서도 호출에서 사용 가능

ex) <link href='css파일경로' rel='stylesheet' type='text/css'>

@ 인라인 스타일 시트
-> 태그 내부에 스타일 정보를 지정하는 방법
-> 해당 내부 태그에 정의 한 것이기 때문에 해당 태그에만 적용

ex) <p style='color:pinl'> 인라인 스타일 시트 적용</p>

@ CSS 선택자
-> CSS에서는 선택자를 잘 쓰는 것이 CSS를 잘하게 되는 것

전체 선택자 -> : *
태그 선택자 -> : 태그(h1, p, li ...)
아이디 선택자 -> : #아이디명
클래스 선택자 -> : .클래스명
후손 선택자 -> : 선택자 선택자
자손 선택자 -> : 선택자 > 선택자

속성 선택자 -> :  선택자[속성=값] / 선택자[속성~=값]
              선택자[속성!=값] / 선택자[속성^=값]
              선택자[속성$=값] / 선택자[속성*=값]

동위 선택자 -> : 선택자 + 선택자 / 선택자 ~ 선택자

구조 선택자 -> : 선택자 : first-child / 선택자 : last-child
             선택자 : nth-child(수열) / 선택자 : nth-last-child(수열)
             선택자 : first-of-type / 선택자 : last-of-type
             선택자 : nth-of-type(수열) / 선택자 nth-last-of-type(수열)

반응 선택자 -> : 선택자 :active / 선택자 :hover

상태 선택자 -> :cheked / :focus

속성 선택자 :enabled / :disabled

링크 선택자 -> :link / :visited

문자 선택자 -> ::first-letter / ::first-line
           ::after / ::before / ::selection

부정선택자 -> 선택자 :not(선택자)

@ 전체 선택자
-> html 문서 안에 있는 모든 태그에 적용되는 스타일 선택자

기본 형식

* { 설정내용; }
※ 전체 태그는 body 태그에 있는 요소 뿐만 아니라 html, head에도 적용이 됨

ex) * {colo : red;}


@ 태그 선택자 
-> 특정 태그에만 적용되는 스타일 선택자

기본 형식

태그명 { 설정내용; }
※ 여러개의 태그를 선택시에는 '.'(쉼표)로 구별하여 작성

ex) p {color : red; }

@ 아이디 / 클래스 선택자
-> 아이디 선택자 : 태그 속성 id를 설정하고 id 값을 선택자로 쓰는 것 (#)
-> 클래스 선택자 : 태그 속성 class를 설정하고 class갑을 선택자로 쓰는 것 (.)


기본 형식 

id : #아이디명 { 설정내용; }
class : #클래스명 { 설정내용; }

※ 클래스 선택자는 중복을 허용하고 id 선택자는 중복 허용을 하지 않음
코드상에서 에러는 없지만 JavaScript의 DOM에서 id 값으로 페이지 요소를
가져오기 때문에 중복을 허용하지 않음

※ 클래스는 중복을 허용하기 때문에 영역을 명확하게 하기 위해 태그 선택자와 같이 쓰는 경우도 있음


@ 기본 속성 선택자
-> 태그 선택자와 함께 사용하는 선택자로 뒤에 [] 를 사용하여 속성과 속성값을 사용

기본 형식

선택자[속성] { 설정내용; }
선택자[속성=속성값] { 설정내용; }

@ 문자열 속성 선택자
-> 특정 문자열을 확인하여 스타일을 적용하는 방식으로 특별한 경우에만 사용

선택자[속성~=값] : 속성값이 특정 값을 단어로 포하는 태그 선택 (띄어쓰기 구분)
선택자[속성|=값] : 속성값이 특정 값을 단어로 포하는 태그 선택 ('-'으로 구분)   
                    (0 앞의 내용 값이 동일 해야 함)
                    -> name 이든, class 이든 선언시 -로 구성된 것 이어야 함


