@ DOM
-> Document Object Model
-> 문서 객체라고 함
-> HTML에 있는 태그를 객체화 하여 자바스크립트에서 다룰 수 있게 만든 객체
-> 모든 노드객체에 접근 할 수 있는 요소와 함수를 제공 함

@ 요소노드(element node)와 텍스트 노트(textnode)
-> 요소노드 : 태그 자체를 의미함
-> 텍스트 노드 : 태그에 기록되어 있는 문자를 의미함
    ※ 텍스트 노드를 가지는 태그(h태그 p태그 등등)와 가지지 않는 태그 (img, input 등)가 있음

@ 텍스트 노드가 있는 문서 객체 생성
document.createElement(태그명) 요소노드 생성
document.createTextNode(내용) 텍스트노드 생성
객체명.appendChild(node) 태그에 자손으로 노드를 추가

※ 즉, 자바스크립트를 가지고 태그와 내용을 생성 할 수 있다는 것을 의미함

ex)

<script>
    function myfunc() {
        var test = document.getElementById("test");
        var h1Tag = document.createElement('h1');
        var tNode = document.createTextNode("aaaaaa");
        h1Tag.appendChild(tNode);
        test.appendChild(h1Tag);
    }
</script>

──────────────────────────────────────────────────────────────────────────────────────────────────

@ 텍스트 노트 없는 문서 객체 생성
-> 텍스트 노드가 없는 객체를 생성 할 수 있음 (img, input, 등등)
-> 요소노드 생성은 createElement 함수를 그대로 사용 함

## 해당 노드에 속성 값 부여하기 및 값 가져오기 ##

객체명(변수).속성 = 속성 -> 값 태그에 속성 값 설정
객체명.setAtrribute(속성 명, 속성 값) -> 태그에 속성 값 설정
    -> setAtrribute를 사용하면 사용자 정의 속성 값도 가능함
객체명.getAtrribute(속성 명) -> 태그의 속성 값 확인
객체명.appendChild(node) -> 태그에 자손으로 노드를 추가(기존과 같음)

@ 문서 객체 제거
-> 페이지 내 작성된 문서의 객체(태그)를 제거 하는 것

부모객체명.removeChild(객체명) -> 부모 객체의 자손 태그를 제거
객체명.remove() -> 해당 객체를 제거

