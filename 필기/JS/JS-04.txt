──────────────────────────────────────────────────────────────────────────────────────────
@ 함수 선언
-> 반환 형태 선언 없이 function 키워드만 이용하여 사용함
-> function 키워드에 함수명을 작성하여 생성하는 방법 (선언적 함수)
-> function 에 함수명을 작성하지 않고, 변수에 대입하는 방법 (익명 함수)
-> 스스로 동작하는 함수 (익명 함수)
	- 단순한 이벤트 처리시 사용

## 선언적 함수 ##

function 함수명([매개변수]){
	처리되는 로직
	[return 되돌려줄 값;]
}



ex) 매개변수도 없고, 넘겨주는 인자값도 없는 함수

	<script>
		function test(){

		}
	</script>

ex) 매개변수는 없지만, 인자값이 있는 경우에 처리하는 함수
	<script>
		function test(){
			console.log(arguments[0]);
		}
	</script>

※ 자바스크립트에서는 매개변수가 없어도 인자값을 넘겨줄 수 있음
처리할때에는 arguments 라는 배열에 자동적으로 들어가 있음


ex) 매개변수는 있지만, 인자값이 없는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>

※ 매개변수도 있지만 인자값이 없으면 값이 나오지 않음

ex) 매개변수도 있고, 인자값이 있는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>
※ 매개변수에 값이 전달되고 매개변수를 통해서 값을 출력할 수 있음

──────────────────────────────────────────────────────────────────────────────────────────

## 익명 함수 ##
-> 변수에 함수를 넣어 작성하는 방법
-> 기존 선언적 함수는 만든 함수를 메모리에 바로 올려놓기 때문에 코드의 순서와는
상관없이 호출이 가능함
-> 하지만 변수에 담기는 익명함수는 해당 변수 및 함수 선언 이후에만 사용이 가능함

## 익명 함수2 ##
-> 스스로 작동하는 익명함수는 1회용이기 때문에 리턴값을 넘길 수 없음

## 함수 호출 ##
-> 함수는 반드시 선언(정의)가 되어야만 실행이 가능함
-> return 값이 있으면 리턴 값을 받을 변수가 있어야 함

return 값이 없는 경우 호출

함수명();

return 값이 있는 경후 호출

var 변수명 = 함수명();

──────────────────────────────────────────────────────────────────────────────────────────

## 클로저 ##
-> 외부함수(자신을 포함하고 있는)의 변수에 접근할 수 있는 내부 함수를 뜻함
-> 스코프체인이라고도 함
※ 스코프란? 변수가 존재하는 영역(지역, 전역, 등..)
-> 클로저는 3가지 스코프를 가짐
	- 클로저 자신에 대한 접근(함수 자기 자신 안에 선언된 변수에 대한 접근)
	- 외부 함수에서 사용되는 변수에 대한 접근
	- 전역 변수에 대한 접근
-> 클로저를 사용하게 되면 내부에서 사용하였던 지역변수를 계속 사용할 수 있게 됨
-> 클로저에서 접근되는 지역변수는 클로저를 통해야만 접근이 가능하고 외부 접근은 불가능 해짐


ex1)
-> 클로저 함수가 아니면서 값이 증가되는 코드(지역변수를 사용)

<script>

    function test() {
		var data = 1;
        var print = document.getElementById("print");
        print.innerHTML += data + "<br>";
        data++;

    }
</script>

ex2)
-> 클로저 함수가 아니면서 값이 증가되는 코드(전역변수를 사용)

<script>
    data = 1;

    function test() {
        var print = document.getElementById("print");
        print.innerHTML += data + "<br>";
        data++;

    }
</script>

──────────────────────────────────────────────────────────────────────────────────────────

@ 내장 함수 (인코딩, 디코딩)
-> 웹상에서 통신시 유니코드 문제는 오작동을 일으킬 문제가 있어 인코딩이 필요함

escape()
-> URL로 보내는 문자열 중 알파벳, 숫자, @, *, _, +, ., /을 제외한 문자열을
인코딩 처리함

unescape()
-> escape로 만들어진 값을 디코딩

──────────────────────────────────────────────────────────────────────────────────────────


