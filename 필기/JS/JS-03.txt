───────────────────────────────────────────────────────────────────────────

@ 형변환

## 숫자 -> 문자열 ##
-> 숫자와 문자를 + 연산하게 되면 문자가 우선되어 숫자를 문자로 변환 함
-> 강제 형변환 : String() 함수를 이용

## 문자열 -> 숫자 ##
-> 사칙 연산 시 숫자가 우선되어 문자를 숫자로 변환
    - 단, +는 자동 변환하지 않음 (-, *, /, % 만 해당)
-> 강제 형변환 : Number(), parseInt(), parseFloat() 함수 이용

───────────────────────────────────────────────────────────────────────────

@ 연산자의 종류

최우선 연산자 : (), [], .
단항 형산자 : ++, --, +, -
산술 연산자 : +, -, *, /, %
관계 연산자 : >, <, >=, <=, ==, !=, ===, !==
논리 연산자 : &&, ||
대입 연산자 : =
복합 대입 연산자 : +=, -=, *=, /=, %=

※ 연산자 우선 순위는 위에서 아래로
최우선 > 단항 > 산술 > 관계 > 논리 > 삼항 > 대입

## === 연산자와 !== 연산자 ##
-> ===, !== 연산자는 데이터와 자료형까지 비교함

───────────────────────────────────────────────────────────────────────────

@ 제어문

## 조건문 ##
-> if, if ~ else, else if, switch, 짧은 조건문(||, &&)

## 반복문 ##
-> for, while, do-while, for in문

## 분기문 ##
-> continue, break

# 문법은 자바와 동일하나 사용 시에 데이터와 자료형은 var 라는것을 사용

## 짧은 조건문(||, &&) ##
-> ||는 거짓이면 실행
-> &&는 참이면 실행

||(OR)와 &&(AND)의 동작 방식을 이용하여 만든 조건문임
-> OR 연산자는 앞의 것이 참이면 뒤의 것을 볼 필요가 없으므로 뒤에 구문이 동작하지 않음
    - 하지만 앞의 것이 거짓이라면 뒤의 것이 참일 수 있으므로 뒤의 것을 봐야 함

-> AND 연산자는 앞의 것이 참이더라도 뒤의 것을 봐야 하므로 참이면 실행 되는 원리
    - 만약 앞의 것이 거짓이면 뒤의 것은 볼 필요가 없으므로 실행되지 않는 원리


※ OR 연산은 둘 중에 하나라도 참이면 참, and 연산은 둘다 참이여야 참이기 때문

───────────────────────────────────────────────────────────────────────────
